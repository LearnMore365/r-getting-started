[
["index.html", "The Working Title Chapter 1 Prerequisites", " The Working Title Reto Wyss, Greg Martin 2018-10-15 Chapter 1 Prerequisites Lorem Ipsum "],
["first-steps.html", "Chapter 2 First Steps 2.1 Math 2.2 Vectors", " Chapter 2 First Steps 2.1 Math Now that you are all set up we want to dive straight into using R. To get the most out of this tutorial you should try to run the code yourself on the terminal in RStudio. You can think of R as a calculator - a very powerful calculator. R supports the five basic arithmetic operations you are familiar with and three more you might not yet have seen. The operators for addition, subtraction and multiplication are self explanatory. 4 + 5 # Addition 10 - 1 # Subtraction 3 * 3 # Multiplication 27 / 3 # Division 3 ** 2 # Power # Standard operator presedence and parentheses rules apply (35 + 8) * 2 ** (10 / 2) - 39 ## [1] 9 ## [1] 9 ## [1] 9 ## [1] 9 ## [1] 9 ## [1] 1337 There are two ways of writing the power operator ** and ^. Personally, I prefer the first way. Now, let’s have a look at the three less common operator. They are modulo, whole number division and matrix-multiplication. 43 %% 7 # Modulo 43 %/% 7 # Whole number division c(4, 2) %*% c(2, 4) # Matrix-multiplication ## [1] 1 ## [1] 6 ## [,1] ## [1,] 16 On the last line of code I’ve introduced something new - a vector c(4, 2). We will discuss vectors in the next tutorial. 2.2 Vectors In the previous tutorial we’ve looked at how you can use arthimetic operators to manipulate numbers. In this tutorial we will create vectors and variables. We will then perform arithmetic operations on them. As you can imagine, we usually want to compute on a lot of numbers at once and this is where vectors come into play. Furthermore, we want our numbers to be re-usable so we define them as variables. Defining Variables with the Assignment Operator We want to tell R to assign a number to placeholder. That placeholder will act just like the literal number and we call it a variable. Historically, R has two assignment operators &lt;- and =. Some people will tell you that using either one is fine. These people are wrong. &lt;- is the correct assignment operator. Now, let’s define our first variable. We will call it my_first_variable. my_first_variable &lt;- 42 When you enter this on your R console in RStudio nothing will happen. We have told R to store the number 42 in a variable and we call this specific variable my_first_variable. To retrieve the value of our variable we just type the variable name and hit enter. my_first_variable ## [1] 42 Arithmetic operations work on variables just like they do on literal numbers. a &lt;- 5 b &lt;- 10 a * b ## [1] 50 Creating Vectors Vectors are a data-structure. They can hold multiple values at once and they can be referenced by a single variable. To create a vector you will use c(). my_first_vector &lt;- c(42, 5, 10) You can have a glimpse at the values in your vector by typing its name. my_first_vector ## [1] 42 5 10 Performing arithmetics on vector is analogous to atomic values. my_first_vector * 10 ## [1] 420 50 100 Now, this result might or might not surprise you. When you perform arthimetic operations on vectors the shorter vector will be recycled. Yes, R is green! That means that internally R treats a single number just like a vector. The following two assignments are equivalent. x &lt;- 5 x &lt;- c(5) Let’s see what happens when we multiply two vectors of the same length. my_first_vector * c(10, 5, 20) ## [1] 420 25 200 We can also assign the result of this multiplication to a variable. my_second_vector &lt;- my_first_vector * c(10, 5, 20) my_second_vector ## [1] 420 25 200 R performs the multiplication element-wise. There are two cases we have not yet look at - what happens when we operate on two vectors of unequal length where neither vector is length one. First case, the vectors are of different length and the length of the longer vector is a multiple of the length of the shorter vector, e.g. length six and length two. c(1, 2, 3, 4, 5, 6) * c(2, 10) ## [1] 2 20 6 40 10 60 That worked fine - R recycles the shorter vector to fit the size of the longer vector. It’s equivalent to this. c(1, 2, 3, 4, 5, 6) * c(2, 10, 2, 10, 2, 10) ## [1] 2 20 6 40 10 60 Second case, the vectors are of different length but the length of the longer vector is not a multiple of the length of the shorter vector, e.g. length five and length two. c(1, 2, 3, 4, 5) * c(2, 10) ## Warning in c(1, 2, 3, 4, 5) * c(2, 10): longer object length is not a ## multiple of shorter object length ## [1] 2 20 6 40 10 R still performs the operation but lets you know that you probably goofed! Indexing Vectors Sometimes you want to retrieve a specific element from a vector. This is where you use indexing. The indexing operator is [ ]. Putting It Together Imagine this - every day you record your dogs weight in kilograms and save it to a variable. weight_01 &lt;- 21 weight_02 &lt;- 22 weight_03 &lt;- 25 weight_04 &lt;- 19 weight_05 &lt;- 23 Everything is going great but here comes your metric system challenged friend and wants those values in pounds. So you calculate the numbers for her. weight_01 * 2.2 weight_02 * 2.2 weight_03 * 2.2 weight_04 * 2.2 weight_05 * 2.2 ## [1] 46.2 ## [1] 48.4 ## [1] 55 ## [1] 41.8 ## [1] 50.6 Phew - that was a lot of typing! We could have saved ourselves a lot of work by putting the numbers into a vector! weights &lt;- c(21, 22, 25, 19, 23) weights_lbs &lt;- weights * 2.2 "],
["references.html", "References", " References "]
]

[
["index.html", "R you ready? Preface", " R you ready? Reto Wyss, Greg Martin 2018-10-31 Preface Figure .: RStudio (This is the caption) \\[ a = \\sum \\] In this book R Core Team (2018) and Wickham (2017) Definition . Here is my theorem. Example . This is my example This is a custom block. We can style it however we want. References "],
["setup.html", "1 Setup", " 1 Setup R is free software. We are going to walk you through the process step-by-step. "],
["installing-r.html", "1.1 Installing R", " 1.1 Installing R You can install R by going to the CRAN website. Figure 1.1: The CRAN homepage Click the link for your operating system. 1.1.1 Installing R on Widows lorem ipsum 1.1.2 Installing R on Mac OS X lorem ipsum "],
["installing-rstudio.html", "1.2 Installing RStudio", " 1.2 Installing RStudio R itself does not come with a nice graphical interface. More text In this section you will be guided through the installation process and then be ready to start your project. We will use RStudio to RStudio https://www.rstudio.com/products/rstudio/download/ "],
["creating-a-new-project.html", "1.3 Creating A New Project", " 1.3 Creating A New Project You should always create a project when you work on an analysis with RStudio. It helps you organize your analysis and takes care of low-level stuff. In the top left, click on File and then select New Project… and you should have a window pop up. Figure 1.2: This is the new Project Window Now, select New Directory and then New Project. Figure 1.3: Choose the type of project. Give your project a name (r-course) and tell it where to save the project. Your R-project will not be a single file but a folder. Figure 1.4: Name and Location That’s it you have created your first RStudio R-project. Figure 1.5: Hurray! You can load projects via Recent Projects under File. "],
["working-with-r-in-rstudio.html", "2 Working with R in RStudio", " 2 Working with R in RStudio RStudio is an integraged development evironment (IDE). This means it offers a lot of tools to make working with the R programming language easier. We will explain the most important tools while also introducing you to the basics of the R programming lanugage. Figure 2.1: RStudio (This is the caption) When you open up RStudio you see a couple of windows and each window has a couple of tabs. We are not going to go into all the tabs here, but we will explain and explore the most important ones. The most important tabs to get familiar with are: Console, where you can interactively run code Source, where you can edit files Environment, where you can check on the state of your analysis History, where you can check what code you’ve ran Files, where you manage your folders and files during analysis Help, where you can read documentation Viewer, where you can view plots or other graphical or interactive elements of your analysis "],
["arithmetic.html", "2.1 Arithmetic", " 2.1 Arithmetic Now that you are all set up we want to dive straight into using R. The console is where you can interactively run commands. You can think of R as a calculator - a very powerful calculator. R supports the five basic arithmetic operations. 4 + 5 # Addition 10 - 1 # Subtraction 3 * 3 # Multiplication 27 / 3 # Division 3 ** 2 # Power # Standard operator presedence and parentheses rules apply (35 + 8) * 2 ** (10 / 2) - 39 ## [1] 9 ## [1] 9 ## [1] 9 ## [1] 9 ## [1] 9 ## [1] 1337 There are two ways of writing the power operator ** and ^. Personally, I prefer the first way. "],
["first-script.html", "2.2 First Script", " 2.2 First Script Most of the time you’ll want to document the commands you run. You can create a new file by clicking File -&gt; New File -&gt; R Script File or by pressing Cmd + Shift + N. Create a new file and add the following line. print(&quot;Hello from R!&quot;) Here, we are using a function print. You may suspect that the print function prints something and you would be correct. We will more functions soon. Now, save the file by either clicking the floppy drive symbol (or pressing Cmd + S). Give then file the name hello.R Clicking the Source button (or pressing Cmd + Shift + S) on the top right border will make R exectute the code in the file and your console will show something along these lines. &gt; source(&#39;~/r-course/hello.R&#39;, echo=TRUE) &gt; print(&quot;Hello from R!&quot;) [1] &quot;Hello from R!&quot; We’ve sourced the file hello.R and the console shows that it ran the command print(&quot;Hello from R!&quot;) and the output was [1] &quot;Hello from R!&quot;. Add the artirhmetic expression to the file. print(&quot;Hello from R!&quot;) 53 - 11 Bring your cursor to the end of the first line after print(&quot;Hello from R!&quot;) and press Cmd + Enter, this will run (source) just this one line. The cursor will automaticall jump to the end of the line after the next command. If you press Cmd + Enter again it will run next line. print(&quot;Hello from R!&quot;) ## [1] &quot;Hello from R!&quot; 53 - 11 ## [1] 42 "],
["variables.html", "2.3 Variables", " 2.3 Variables Usually you will have to store results from running a command and sometimes you want t my_first_variable &lt;- 42 my_text &lt;- &quot;This is some text!&quot; When you enter this on your R console in RStudio nothing will happen. We have told R to store the number 42 in a variable and we call this specific variable my_first_variable. To retrieve the value of our variable we just type the variable name and hit enter. my_first_variable ## [1] 42 Arithmetic operations work on variables just like they do on literal numbers. a &lt;- 5 b &lt;- 10 a * b ## [1] 50 "],
["vectors.html", "2.4 Vectors", " 2.4 Vectors Vectors are a data-structure. They can hold multiple values at once and they can be referenced by a single variable. To create a vector you will use c(). my_first_vector &lt;- c(42, 5, 10) You can have a glimpse at the values in your vector by typing its name. my_first_vector ## [1] 42 5 10 Performing arithmetics on vector is analogous to atomic values. my_first_vector * 10 ## [1] 420 50 100 Shorthand for vectors 1:10 1:5 * 2 ## [1] 1 2 3 4 5 6 7 8 9 10 ## [1] 2 4 6 8 10 "],
["functions.html", "2.5 Functions", " 2.5 Functions Whenever you tell R to run some command, R will execute that command in an environment. sum(my_first_vector) ## [1] 57 sd(my_first_vector) ## [1] 20.07486 "],
["starting-data-analysis.html", "3 Starting Data Analysis ", " 3 Starting Data Analysis "],
["creating-a-project.html", "3.1 Creating A Project", " 3.1 Creating A Project You should always use the project functonality when you work with R and RStudio. This also sets the working-directory. getwd() ## [1] &quot;C:/Users/retow/Documents/GitHub/r-getting-started&quot; "],
["folder-structure.html", "3.2 Folder Structure", " 3.2 Folder Structure Show new and existing directory options. Some people may already have collected data. +---Data | +---Output "],
["packages.html", "3.3 Packages", " 3.3 Packages CRAN / github We can prime this by telling people about the R community in the introduction installing and loading (maybe show updating in RStudio) "],
["importing-data.html", "3.4 Importing Data", " 3.4 Importing Data This is rather short and not worth a chapter on it’s own. Filetypes: csv xlsx library(readr) Here we introduce the readr and readxl packagtes. my_iris &lt;- read_csv(&quot;iris.csv&quot;) ## Parsed with column specification: ## cols( ## Sepal.Length = col_double(), ## Sepal.Width = col_double(), ## Petal.Length = col_double(), ## Petal.Width = col_double(), ## Species = col_character() ## ) head(my_iris, n = 5) ## # A tibble: 5 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa this is useful because we can fix the column types like this. my_iris &lt;- read_csv( file = &quot;iris.csv&quot;, col_types = cols( Sepal.Length = col_double(), Sepal.Width = col_double(), Petal.Length = col_double(), Petal.Width = col_double(), Species = col_character() ) ) "],
["manipulating-data.html", "4 Manipulating Data", " 4 Manipulating Data Here we introduce the tidyr, dplyr, stringr and forcats packages. Important functions: dplyr::rename dplyr::mutate tidyr::separate stringr::str_extract stringr::str_replace library(tidyr) iris %&gt;% separate(Sepal.Length, into = c(&quot;first&quot;, &quot;second&quot;), sep = &quot;\\\\.&quot;) ## Warning: Expected 2 pieces. Missing pieces filled with `NA` in 17 rows [5, ## 8, 26, 27, 36, 41, 44, 50, 51, 61, 63, 79, 84, 86, 94, 120, 139]. ## first second Sepal.Width Petal.Length Petal.Width Species ## 1 5 1 3.5 1.4 0.2 setosa ## 2 4 9 3.0 1.4 0.2 setosa ## 3 4 7 3.2 1.3 0.2 setosa ## 4 4 6 3.1 1.5 0.2 setosa ## 5 5 &lt;NA&gt; 3.6 1.4 0.2 setosa ## 6 5 4 3.9 1.7 0.4 setosa ## 7 4 6 3.4 1.4 0.3 setosa ## 8 5 &lt;NA&gt; 3.4 1.5 0.2 setosa ## 9 4 4 2.9 1.4 0.2 setosa ## 10 4 9 3.1 1.5 0.1 setosa ## 11 5 4 3.7 1.5 0.2 setosa ## 12 4 8 3.4 1.6 0.2 setosa ## 13 4 8 3.0 1.4 0.1 setosa ## 14 4 3 3.0 1.1 0.1 setosa ## 15 5 8 4.0 1.2 0.2 setosa ## 16 5 7 4.4 1.5 0.4 setosa ## 17 5 4 3.9 1.3 0.4 setosa ## 18 5 1 3.5 1.4 0.3 setosa ## 19 5 7 3.8 1.7 0.3 setosa ## 20 5 1 3.8 1.5 0.3 setosa ## 21 5 4 3.4 1.7 0.2 setosa ## 22 5 1 3.7 1.5 0.4 setosa ## 23 4 6 3.6 1.0 0.2 setosa ## 24 5 1 3.3 1.7 0.5 setosa ## 25 4 8 3.4 1.9 0.2 setosa ## 26 5 &lt;NA&gt; 3.0 1.6 0.2 setosa ## 27 5 &lt;NA&gt; 3.4 1.6 0.4 setosa ## 28 5 2 3.5 1.5 0.2 setosa ## 29 5 2 3.4 1.4 0.2 setosa ## 30 4 7 3.2 1.6 0.2 setosa ## 31 4 8 3.1 1.6 0.2 setosa ## 32 5 4 3.4 1.5 0.4 setosa ## 33 5 2 4.1 1.5 0.1 setosa ## 34 5 5 4.2 1.4 0.2 setosa ## 35 4 9 3.1 1.5 0.2 setosa ## 36 5 &lt;NA&gt; 3.2 1.2 0.2 setosa ## 37 5 5 3.5 1.3 0.2 setosa ## 38 4 9 3.6 1.4 0.1 setosa ## 39 4 4 3.0 1.3 0.2 setosa ## 40 5 1 3.4 1.5 0.2 setosa ## 41 5 &lt;NA&gt; 3.5 1.3 0.3 setosa ## 42 4 5 2.3 1.3 0.3 setosa ## 43 4 4 3.2 1.3 0.2 setosa ## 44 5 &lt;NA&gt; 3.5 1.6 0.6 setosa ## 45 5 1 3.8 1.9 0.4 setosa ## 46 4 8 3.0 1.4 0.3 setosa ## 47 5 1 3.8 1.6 0.2 setosa ## 48 4 6 3.2 1.4 0.2 setosa ## 49 5 3 3.7 1.5 0.2 setosa ## 50 5 &lt;NA&gt; 3.3 1.4 0.2 setosa ## 51 7 &lt;NA&gt; 3.2 4.7 1.4 versicolor ## 52 6 4 3.2 4.5 1.5 versicolor ## 53 6 9 3.1 4.9 1.5 versicolor ## 54 5 5 2.3 4.0 1.3 versicolor ## 55 6 5 2.8 4.6 1.5 versicolor ## 56 5 7 2.8 4.5 1.3 versicolor ## 57 6 3 3.3 4.7 1.6 versicolor ## 58 4 9 2.4 3.3 1.0 versicolor ## 59 6 6 2.9 4.6 1.3 versicolor ## 60 5 2 2.7 3.9 1.4 versicolor ## 61 5 &lt;NA&gt; 2.0 3.5 1.0 versicolor ## 62 5 9 3.0 4.2 1.5 versicolor ## 63 6 &lt;NA&gt; 2.2 4.0 1.0 versicolor ## 64 6 1 2.9 4.7 1.4 versicolor ## 65 5 6 2.9 3.6 1.3 versicolor ## 66 6 7 3.1 4.4 1.4 versicolor ## 67 5 6 3.0 4.5 1.5 versicolor ## 68 5 8 2.7 4.1 1.0 versicolor ## 69 6 2 2.2 4.5 1.5 versicolor ## 70 5 6 2.5 3.9 1.1 versicolor ## 71 5 9 3.2 4.8 1.8 versicolor ## 72 6 1 2.8 4.0 1.3 versicolor ## 73 6 3 2.5 4.9 1.5 versicolor ## 74 6 1 2.8 4.7 1.2 versicolor ## 75 6 4 2.9 4.3 1.3 versicolor ## 76 6 6 3.0 4.4 1.4 versicolor ## 77 6 8 2.8 4.8 1.4 versicolor ## 78 6 7 3.0 5.0 1.7 versicolor ## 79 6 &lt;NA&gt; 2.9 4.5 1.5 versicolor ## 80 5 7 2.6 3.5 1.0 versicolor ## 81 5 5 2.4 3.8 1.1 versicolor ## 82 5 5 2.4 3.7 1.0 versicolor ## 83 5 8 2.7 3.9 1.2 versicolor ## 84 6 &lt;NA&gt; 2.7 5.1 1.6 versicolor ## 85 5 4 3.0 4.5 1.5 versicolor ## 86 6 &lt;NA&gt; 3.4 4.5 1.6 versicolor ## 87 6 7 3.1 4.7 1.5 versicolor ## 88 6 3 2.3 4.4 1.3 versicolor ## 89 5 6 3.0 4.1 1.3 versicolor ## 90 5 5 2.5 4.0 1.3 versicolor ## 91 5 5 2.6 4.4 1.2 versicolor ## 92 6 1 3.0 4.6 1.4 versicolor ## 93 5 8 2.6 4.0 1.2 versicolor ## 94 5 &lt;NA&gt; 2.3 3.3 1.0 versicolor ## 95 5 6 2.7 4.2 1.3 versicolor ## 96 5 7 3.0 4.2 1.2 versicolor ## 97 5 7 2.9 4.2 1.3 versicolor ## 98 6 2 2.9 4.3 1.3 versicolor ## 99 5 1 2.5 3.0 1.1 versicolor ## 100 5 7 2.8 4.1 1.3 versicolor ## 101 6 3 3.3 6.0 2.5 virginica ## 102 5 8 2.7 5.1 1.9 virginica ## 103 7 1 3.0 5.9 2.1 virginica ## 104 6 3 2.9 5.6 1.8 virginica ## 105 6 5 3.0 5.8 2.2 virginica ## 106 7 6 3.0 6.6 2.1 virginica ## 107 4 9 2.5 4.5 1.7 virginica ## 108 7 3 2.9 6.3 1.8 virginica ## 109 6 7 2.5 5.8 1.8 virginica ## 110 7 2 3.6 6.1 2.5 virginica ## 111 6 5 3.2 5.1 2.0 virginica ## 112 6 4 2.7 5.3 1.9 virginica ## 113 6 8 3.0 5.5 2.1 virginica ## 114 5 7 2.5 5.0 2.0 virginica ## 115 5 8 2.8 5.1 2.4 virginica ## 116 6 4 3.2 5.3 2.3 virginica ## 117 6 5 3.0 5.5 1.8 virginica ## 118 7 7 3.8 6.7 2.2 virginica ## 119 7 7 2.6 6.9 2.3 virginica ## 120 6 &lt;NA&gt; 2.2 5.0 1.5 virginica ## 121 6 9 3.2 5.7 2.3 virginica ## 122 5 6 2.8 4.9 2.0 virginica ## 123 7 7 2.8 6.7 2.0 virginica ## 124 6 3 2.7 4.9 1.8 virginica ## 125 6 7 3.3 5.7 2.1 virginica ## 126 7 2 3.2 6.0 1.8 virginica ## 127 6 2 2.8 4.8 1.8 virginica ## 128 6 1 3.0 4.9 1.8 virginica ## 129 6 4 2.8 5.6 2.1 virginica ## 130 7 2 3.0 5.8 1.6 virginica ## 131 7 4 2.8 6.1 1.9 virginica ## 132 7 9 3.8 6.4 2.0 virginica ## 133 6 4 2.8 5.6 2.2 virginica ## 134 6 3 2.8 5.1 1.5 virginica ## 135 6 1 2.6 5.6 1.4 virginica ## 136 7 7 3.0 6.1 2.3 virginica ## 137 6 3 3.4 5.6 2.4 virginica ## 138 6 4 3.1 5.5 1.8 virginica ## 139 6 &lt;NA&gt; 3.0 4.8 1.8 virginica ## 140 6 9 3.1 5.4 2.1 virginica ## 141 6 7 3.1 5.6 2.4 virginica ## 142 6 9 3.1 5.1 2.3 virginica ## 143 5 8 2.7 5.1 1.9 virginica ## 144 6 8 3.2 5.9 2.3 virginica ## 145 6 7 3.3 5.7 2.5 virginica ## 146 6 7 3.0 5.2 2.3 virginica ## 147 6 3 2.5 5.0 1.9 virginica ## 148 6 5 3.0 5.2 2.0 virginica ## 149 6 2 3.4 5.4 2.3 virginica ## 150 5 9 3.0 5.1 1.8 virginica "],
["visualizing-data.html", "5 Visualizing Data", " 5 Visualizing Data here we show the ggplot2 and mayne sneak peak at plotly "],
["yay.html", "5.1 Yay", " 5.1 Yay library(tidyverse) bbt &lt;- read_csv(&quot;static/data/BTT.csv&quot;) bbt %&gt;% filter(episodes &gt; 10) %&gt;% pander::pander() actor person episodes start_year end_year Johnny Galecki Leonard Hofstadter 264 2006 2018 Jim Parsons Sheldon Cooper 264 2006 2018 Kaley Cuoco Penny 263 2007 2018 Simon Helberg Howard Wolowitz 263 2007 2018 Kunal Nayyar Raj Koothrappali 263 2007 2018 Melissa Rauch Bernadette Rostenkowski 193 2009 2018 Mayim Bialik Amy Farrah Fowler 187 2010 2018 Kevin Sussman Stuart Bloom 76 2009 2018 Carol Ann Susi Debbie Wolowitz 40 2007 2017 John Ross Bowie Barry Kripke 23 2009 2018 Laura Spencer Emily Sweeney 17 2014 2017 Wil Wheaton Wil Wheaton 16 2009 2018 Brian George Dr. V.M. Koothrappali 15 2007 2018 Laurie Metcalf Mary Cooper 14 2007 2018 Christine Baranski Dr. Beverly Hofstadter 13 2009 2018 Aarti Mann Priya Koothrappali 12 2010 2011 Brian Posehn Bert Kibbler 12 2013 2018 Ian Scott Rudolph Captain Sweatpants 12 2009 2014 bbt %&gt;% filter(episodes &gt; 10) %&gt;% arrange(episodes) %&gt;% mutate(person = factor(person, unique(person))) %&gt;% ggplot(aes(x = person, y = episodes)) + geom_col() + coord_flip() "],
["analyzing-data.html", "6 Analyzing Data", " 6 Analyzing Data maybe we show a t-test here - bt no special packages "],
["t-test.html", "6.1 T-test", " 6.1 T-test "],
["linear-model.html", "6.2 Linear Model", " 6.2 Linear Model \\[y = a + bx\\] a &lt;- 2 b &lt;- 6 x &lt;- 1:10 y &lt;- a + x * b df &lt;- tibble(y = y, x = x) lm(y ~ x, data = df) ## ## Call: ## lm(formula = y ~ x, data = df) ## ## Coefficients: ## (Intercept) x ## 2 6 We can also fit a non-linear relationship a &lt;- 2 b_1 &lt;- 3 b_2 &lt;- 4 x &lt;- 1:10 y &lt;- a + x * b_1 + x^2 * b_2 df &lt;- tibble(y = y, x = x, x2 = x ** 2) lm(y ~ x, data = df) ## ## Call: ## lm(formula = y ~ x, data = df) ## ## Coefficients: ## (Intercept) x ## -86 47 lm(y ~ x + x2, data = df) ## ## Call: ## lm(formula = y ~ x + x2, data = df) ## ## Coefficients: ## (Intercept) x x2 ## 2 3 4 "],
["next-steps.html", "7 Next Steps ", " 7 Next Steps "],
["how-to-get-help.html", "7.1 How To Get Help", " 7.1 How To Get Help Stack overflow "],
["more-on-packages.html", "7.2 More on packages", " 7.2 More on packages what goes here? "],
["writting-clean-code.html", "7.3 Writting clean code", " 7.3 Writting clean code We can reference some stuff here "],
["what-else-you-can-do-with-r.html", "7.4 What else you can do with R", " 7.4 What else you can do with R dashboards blogdown deeplearning "],
["references.html", "References", " References "]
]
